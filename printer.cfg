########################################
#Various Configuration Files to Include#
########################################
[include wipe.cfg]

[save_variables]
filename: ~/klipper_config/variables.cfg ; variable storage file

########################################
#          Enable Gcode Arcs           #
########################################

[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

########################################
#            Input Shaper              #
########################################
[input_shaper]
shaper_freq_x: 57.6
shaper_freq_y: 48
shaper_type: mzv

########################################
# Probe Configuration
########################################

[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

[probe]
##    Euclid Probe
pin: ^PB1                    ; use pin PA0 and enable internal pullup resistor as this is an NC switch  use ! to invert if needed
x_offset: 0.0               
y_offset: 0.0             
z_offset: -0.370             ; larger numbers are CLOSER to the bed
speed: 5                     ; probing speed of 5mm/second ideal is <10mm/sec  
samples: 2                   ; number of probes to perform per sample
samples_result: average      ; normalization method: see config reference
sample_retract_dist: 3
samples_tolerance: 0.009
samples_tolerance_retries: 5

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}


[safe_z_home]
home_xy_position: 175, 175
#   A X, Y coordinate (e.g. 100, 100) where the Z homing should be
#   performed. This parameter must be provided.
speed: 150.0
#   Speed at which the toolhead is moved to the safe Z home
#   coordinate. The default is 50 mm/s
z_hop: 10
#   Distance (in mm) to lift the Z axis prior to homing. This is
#   applied to any homing command, even if it doesn't home the Z axis.
#   If the Z axis is already homed and the current Z position is less
#   than z_hop, then this will lift the head to a height of z_hop. If
#   the Z axis is not already homed the head is lifted by z_hop.
#   The default is to not implement Z hop.
#z_hop_speed: 15.0
#   Speed (in mm/s) at which the Z axis is lifted prior to homing. The
#   default is 15 mm/s.
move_to_previous: False
#   When set to True, the X and Y axes are reset to their previous
#   positions after Z axis homing. The default is False.

#[homing_override]
#gcode: SET_KINEMATIC_POSITION Z=0
# G0 Z15 F6000           ; raise bed to 15
# G28 X Y F8000              ; home X & Y
# M401                  ; deploy Euclid Probe
# G0 X175 Y175 F6000    ; move probe to center of bed
# G28 Z                 ; home Z
# G0 Z15 F6000           ; raise bed to 15
# M402                  ; retract Euclid Probe

########################################
# Printer configuration
########################################

[idle_timeout]
gcode: 
  TURN_OFF_HEATERS
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".

timeout: 1200
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

########################################
# Mainsail Configuration
########################################
[include mainsail.cfg]

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 3000
#max_accel_to_decel: 1500
#square_corner_velocity: 5 
max_z_velocity: 8
max_z_accel: 40

[display_status]

[pause_resume]


##################################
# Neopixel Config Clipper Native #
##################################

[neopixel my_neopixel]
pin: PA9
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 0.8
initial_GREEN: 0.0
initial_BLUE: 0.8
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.

[gcode_macro LED_IDLE]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.0 GREEN=0.0 BLUE=0.3
    {% endfor %}
    
[gcode_macro LED_UP]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.2 BLUE=0.0 INDEX=2
	G4 P5
    {% endfor %}

[gcode_macro LED_SET]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.2 BLUE=0.0 INDEX=2
        SET_LED LED=my_neopixel RED=0.3 GREEN=0.5 BLUE=0.3 INDEX=1
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.2 BLUE=0.0 INDEX=3
	G4 P5
    {% endfor %}
    
[gcode_macro LED_SETTLE]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=2
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=1
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=3
    {% endfor %}
        
[gcode_macro LED_PROBING]
gcode:
    {% for flashes in range(params.COUNT|default(10)|int) %}
	    SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=2 TRANSMIT=1
	G4 P120                       ; sleep 250ms
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=3 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=1
	G4 P120                       ; sleep 250ms
	SET_LED LED=my_neopixel RED=0.0 GREEN=0.5 BLUE=0.0 INDEX=3 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.5 BLUE=0.0 INDEX=1 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=2 TRANSMIT=1
	G4 P80                       ; sleep 80ms
    {% endfor %}
    
[gcode_macro LED_READY]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.0 GREEN=0.3 BLUE=0.0 INDEX=2
    SET_LED LED=my_neopixel RED=0.4 GREEN=0 BLUE=0.7 INDEX=1
    SET_LED LED=my_neopixel RED=0.4 GREEN=0 BLUE=0.7 INDEX=3
    {% endfor %}

[gcode_macro LED_BED_READY]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=1
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=3
    {% endfor %}

[gcode_macro LED_PRINTING]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.2 GREEN=0.1 BLUE=0.2 INDEX=1
    SET_LED LED=my_neopixel RED=0.2 GREEN=0.1 BLUE=0.2 INDEX=3
    SET_LED LED=my_neopixel RED=0.2 GREEN=0.9 BLUE=0.2 INDEX=2
    {% endfor %}

[gcode_macro LED_HOTEND_READY]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=2
    {% endfor %}

    
[gcode_macro LED_SHUTDOWN]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.4 GREEN=0 BLUE=0.7 INDEX=2
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=1
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=3
    {% endfor %}
    
[gcode_macro PRESENT_PART]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0 GREEN=0.2 BLUE=0 INDEX=2
    SET_LED LED=my_neopixel RED=1 GREEN=1 BLUE=1 INDEX=1
    SET_LED LED=my_neopixel RED=1 GREEN=1 BLUE=1 INDEX=3
    {% endfor %}

[gcode_macro LED_HOTEND_HEATING]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=1 GREEN=0.0 BLUE=0.0 INDEX=2
    {% endfor %}

[gcode_macro LED_BED_HEATING]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=1 GREEN=0.1 BLUE=0.0 INDEX=1
    SET_LED LED=my_neopixel RED=1 GREEN=0.1 BLUE=0.0 INDEX=3
    {% endfor %}


########################################
# Temperature configuration
########################################

[heater_bed]
heater_pin: PB7
sensor_pin: PA0
sensor_type: EPCOS 100K B57560G104F
#control: pid
#pid_kp = 64.657
#pid_ki = 0.887
#pid_kd = 1178.372
min_temp: 0
max_temp: 130

[fan] # PART COOLERS
pin: PE0 # FAN2

[heater_fan HeaterFan] # HOTEND COOLER
pin: PE6 # FAN1
heater_temp: 50.0
heater: extruder

[verify_heater extruder] 
max_error: 255
check_gain_time: 90

[controller_fan BoardFan]
heater: extruder, heater_bed
pin: PE5 # FAN0

[temperature_sensor MCU]
sensor_type: temperature_mcu

[temperature_sensor SoC]
sensor_type: temperature_host

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_23004F000E504B4633373520-if00
restart_method: command
baud: 250000

# FOR RESONANCE COMPENSATION

# [mcu rpi]
# serial: /tmp/klipper_host_mcu

# [adxl345]
# cs_pin: rpi:None

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#     175,175,20  # an example


###################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE9, EXP1_2=PE10,
    EXP1_3=PE11, EXP1_4=PE12,
    EXP1_5=PE13, EXP1_6=PE14,    # Slot in the socket on this side
    EXP1_7=PE15, EXP1_8=PB10,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PB14, EXP2_2=PB13,
    EXP2_3=PF7, EXP2_4=PB12,
    EXP2_5=PE7, EXP2_6=PB11,      # Slot in the socket on this side
    EXP2_7=PE8, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5


[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
## Some micro-controller boards may require an spi bus to be specified:
#spi_bus: spi
## Alternatively, some micro-controller boards may work with software spi:
contrast: 63
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5

[output_pin beeper]
pin: EXP1_1

[neopixel btt_mini12864]
pin: EXP1_6
chain_count: 3
color_order: RGB
initial_RED: 0.5
initial_GREEN: 0.0
initial_BLUE: 0.5







[bed_screws]
screw1: 75,50
screw1_name: Front Left
screw2: 315,50
screw2_name: Front Right
screw3: 315,300
screw3_name: Rear Right
screw4: 75, 300
screw4_name: Rear Left
speed: 250
horizontal_move_z: 10

[screws_tilt_adjust]
screw1: 55,20
screw1_name: Front Left
screw2: 362,20
screw2_name: Front Right
screw3: 362,300
screw3_name: Rear Right
screw4: 55, 300
screw4_name: Rear Left
speed: 250
horizontal_move_z: 10

########################################
#         Euclid Probe Wrappers        #
########################################

# Macro to perform a bed mesh calibration by wrapping it between M401/M402 macros
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing:    BED_MESH_CALIBRATE_ORIGINAL
#gcode:
#  M401                           ; deploy Euclid Probe if needed
#  BED_MESH_CALIBRATE_ORIGINAL    ; check bed level
#  M402                           ; dock Euclid Probe
#
#
# Macro to perform a modified z_tilt  by wrapping it between M401/M402 macros
#[gcode_macro Z_TILT_ADJUST]
#rename_existing:    _Z_TILT_ADJUST_ORIGINAL
#gcode:
#  M401                           ; deploy Euclid Probe if needed
#  _Z_TILT_ADJUST_ORIGINAL         ; check bed level
#  M402                             ; dock Euclid Probe

########################################
#           Z Tilt Adjust              #
########################################

[z_tilt]
z_positions: 10, 10
  360, 10
  188, 360
#   A list of X, Y coordinates (one per line; subsequent lines
#   indented) describing the location of each bed "pivot point". The
#   "pivot point" is the point where the bed attaches to the given Z
#   stepper. It is described using nozzle coordinates (the X, Y position
#   of the nozzle if it could move directly above the point). The
#   first entry corresponds to stepper_z, the second to stepper_z1,
#   the third to stepper_z2, etc. This parameter must be provided.
points: 75, 75
  340, 75
  189, 345
#   A list of X, Y coordinates (one per line; subsequent lines
#   indented) that should be probed during a Z_TILT_ADJUST command.
#   Specify coordinates of the nozzle and be sure the probe is above
#   the bed at the given nozzle coordinates. This parameter must be
#   provided.
speed: 175
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 15
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
retries: 5
#   Number of times to retry if the probed points aren't within
#   tolerance.
retry_tolerance: 0.025
#   If retries are enabled then retry if largest and smallest probed
#   points differ more than retry_tolerance. Note the smallest unit of
#   change here would be a single step. However if you are probing
#   more points than steppers then you will likely have a fixed
#   minimum value for the range of probed points which you can learn
#   by observing command output.


########################################
#         Quad Gantry Level            #
########################################

#[quad_gantry_level]
#gantry_corners: -24, 105
#  400, 277
#   A newline separated list of X, Y coordinates describing the two
#   opposing corners of the gantry. The first entry corresponds to Z,
#   the second to Z2. This parameter must be provided.
#points: 70, 30
#  70, 300
#  333, 300
#  333, 30
#   A newline separated list of four X, Y points that should be probed
#   during a QUAD_GANTRY_LEVEL command. Order of the locations is
#   important, and should correspond to Z, Z1, Z2, and Z3 location in
#   order. This parameter must be provided. For maximum accuracy,
#   ensure your probe offsets are configured.
#speed:175
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
#horizontal_move_z: 9
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
#max_adjust: 20
#   Safety limit if an adjustment greater than this value is requested
#   quad_gantry_level will abort.
#retries: 10
#   Number of times to retry if the probed points aren't within
#   tolerance.
#retry_tolerance: 0.075
#   If retries are enabled then retry if largest and smallest probed
#   points differ more than retry_tolerance.


########################################
#            Bed Mesh                  #
########################################

[bed_mesh]
speed: 300
horizontal_move_z: 10.0
mesh_min: 75, 75
mesh_max: 330, 310
probe_count: 4, 4
algorithm: bicubic
move_check_distance: 3
split_delta_z: 0.035
fade_start: 1
fade_end: 5


########################################
#     Stepper configuration            #
########################################

[stepper_x]
full_steps_per_rotation: 400 #(200 for 1.8 deg, 400 for 0.9)
step_pin: PE2
dir_pin: PB4
enable_pin: !PC11
microsteps: 16
rotation_distance: 40
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 0
position_max: 380
position_min: -100
homing_speed: 80
homing_retract_dist: 0



[stepper_y]
full_steps_per_rotation: 400 #(200 for 1.8 deg, 400 for 0.9)
step_pin: PF12
dir_pin: !PF11
enable_pin: !PB3
microsteps: 16
rotation_distance: 40
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: -20
position_min: -100
position_max: 380
homing_speed: 80
homing_retract_dist: 0

[stepper_z]
step_pin: PD7
dir_pin: PD6
enable_pin: !PF10
microsteps: 16
rotation_distance: 2
endstop_pin: probe:z_virtual_endstop
position_max: 375
position_min: -20 # NEEDED FOR CALIBRATION 
homing_speed: 10
second_homing_speed: 5

##	Z1 Stepper - Rear on Motor5
[stepper_z1]
step_pin: PC9
dir_pin: PC8
enable_pin: !PD1
rotation_distance: 2
microsteps: 16

##	Z2 Stepper - Front Right on Motor6
[stepper_z2]
step_pin: PA10
dir_pin: PD15
enable_pin: !PA15
rotation_distance: 2
microsteps: 16


[extruder]
# E0 on Motor7
step_pin: PD12
dir_pin: PD11
enable_pin: !PD14
heater_pin: PE3 # HE0
sensor_pin:  PA1
microsteps: 16
rotation_distance: 26
full_steps_per_rotation: 200
gear_ratio: 50:10
nozzle_diameter: 0.600
max_extrude_only_distance: 2500
max_extrude_cross_section: 10
filament_diameter: 1.750
# min_extrude_temp: 10 #FOR CALIBRATION
min_extrude_temp: 20
sensor_type: PT1000
#control: pid
#pid_kp = 26.897
#pid_ki = 1.830
#pid_kd = 98.848
min_temp: 0
max_temp: 350
pressure_advance = 0.02
pressure_advance_smooth_time: 0.01

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
# Motor1
uart_pin: PC10
diag_pin: PF3
run_current: 0.75
# hold_current: 0.100
interpolate: False
stealthchop_threshold: 999999
driver_SGTHRS: 150  # 255 is most sensitive value, 0 is least sensitive


[tmc2209 stepper_y]
# Motor2
uart_pin: PF13
diag_pin: PF4
run_current: 0.75
# hold_current: 0.100
interpolate: False
stealthchop_threshold: 999999
driver_SGTHRS: 170  # 255 is most sensitive value, 0 is least sensitive


[tmc2209 stepper_z]
# Motor3
uart_pin: PF9
diag_pin: PF5
run_current: 0.750
hold_current: 0.150
interpolate: False
stealthchop_threshold: 999999

[tmc2209 stepper_z1]
# Motor5
uart_pin: PD0
interpolate: false
run_current: 0.750
hold_current: 0.150
stealthchop_threshold: 999999

[tmc2209 stepper_z2]
# Motor6
uart_pin: PF8
interpolate: true
run_current: 0.750
hold_current: 0.150
stealthchop_threshold: 999999


[tmc2209 extruder]
# Motor7]
uart_pin: PD13
run_current: 0.470
interpolate: False
# hold_current: 0.100
stealthchop_threshold: 999999

########################################
#             GCODE MACROS             #
########################################

[gcode_macro BED_MESH_CALIBRATE_RECT]
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 3
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}




[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro LEVEL_AT_TEMP]
gcode:
  {% set TEMP = params.TEMP|default(60)|float %}
  M140 S{TEMP}
  M190 S{TEMP}
  G4 P60000
  G28
  BED_MESH_CALIBRATE
  TURN_OFF_HEATERS
  

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    M104 S{EXTRUDER_TEMP} ; start heating extruder
    M190 S{BED_TEMP} ; wait for bed temperature
    G28 ; Home
    LEVEL_BED_ADVANCED MAX_AGE=8 ; probe mesh eventually
  LED_READY
  G4 P9000
  G90 ; use absolute coordinates
  M83 ; extruder relative mode
  LED_BED_HEATING
  G4 P5000
  G4 S10 ; allow partial nozzle warmup
  LED_HOTEND_HEATING
  M104 S{EXTRUDER_TEMP} ; start heating extruder
  G1 X250 Y-5 F8000
  M104 S{EXTRUDER_TEMP}
  M109 S{EXTRUDER_TEMP}
  CLEAN_NOZZLE
  LED_HOTEND_READY
  LED_BED_READY
  G92 E0
  LED_PRINTING


[gcode_macro END_PRINT]
gcode:
    G91 ; Relative positioning
    G1 E-3 F1800 ; Retract
    G1 F3000 Z20 ; Move up
    G90 ; exact positioning
    G1 X300 Y300 ;
# Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    SAVE_IF_SET     ; SAVE_CONFIG if a mesh was probed in START_PRINT
    M84 ; Disable steppers

; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
    
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  LED_PROBING
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}

# Macro to Deploy Bed Probe
#[gcode_macro M401]
#gcode:
#    G90
#    {action_respond_info("Entering M401")}
#    error_if_probe_deployed    ; check to make sure that the probe is not already attached
#    _M401
#
#[gcode_macro error_if_probe_deployed]
#gcode:
#    QUERY_PROBE                 ; check probe status
#    do_error_if_probe_deployed  ; logic check to verify probe is not already deployed
#
#[gcode_macro do_error_if_probe_deployed]
#gcode:
#    {% if not printer.probe.last_query %}
#      {action_raise_error("Euclid Probe is already deployed - Remove and Return it to the dock")}
#    {% endif %}
#
# Macro to Deploy Bed Probe
#[gcode_macro _M401]
#gcode:
#    G90
#    {% if printer.probe.last_query %} 
#      #                       for moving gantry machine this may need to be adjusted
#      G0 X50 Y352 F7000          ;  move the carriage to safe position to move from
#      G0 X0 Y352 F7000            ;  move to the side of the dock
#      G4 P250              ;  wait 1/4 second 
#      G0 X0 Y374 F7000             ;  move sideways over the dock to pick up probe
#      M400                 ;  wait for moves to finish
#      G4 P100              ;  pause 1/4 sec for detection
#      G0 X050 Y374 F7000            ;  move out of the dock in a straight line
#    {% endif %}
#    error_if_probe_not_deployed
#    {action_respond_info("Exiting M401")}
#
#[gcode_macro error_if_probe_not_deployed]
#gcode:
#    QUERY_PROBE
#    do_error_if_probe_not_deployed
#
#[gcode_macro do_error_if_probe_not_deployed]
#gcode:
#    {% if printer.probe.last_query %}
#      {action_raise_error("Euclid Probe failed to deploy!")}
#    {% endif %}

# Macro to retract Bed Probe
#[gcode_macro M402]
#gcode:
#    G90
#    {action_respond_info("Entering M402")}
#    error_if_probe_not_deployed
#    _M402

# Macro to Stow Bed Leveling Probe
#[gcode_macro _M402]
#gcode:
#    G90
#    {% if not printer.probe.last_query %} 
#      #                             ;  for moving gantry system this may have to be altered to match your dock elevation 
#      G0 X50 Y373 F7000               ;  move to the re-entry staging position
#      G0 X40 Y373 F7000               ;  move to a position in front of the dock so simple linear movement into dock 
#      G0 X0 Y373 F1400                 ;  slowly move into dock 
#      M400                          ;  wait for moves to finish
#      G4 P100                       ;  forced pause here so motion is definite 90 tavel to swipe
#      G0 X0 Y352 F7000               ;  quick swipe off 
#      G0 X50 Y352                    ;  move to front center of bed                   
#    {% endif %}                     ;  exit the if-then loop. was missing in previous versions
#    error_if_probe_deployed         ;  verify that the probe is detached. is corrected error  
#    {action_respond_info("Exiting M402")}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.007812, -0.006875, 0.001250, 0.002812
#*# 	  -0.026875, -0.019688, -0.017500, -0.012188
#*# 	  -0.082500, -0.051563, -0.030625, -0.060313
#*# 	  -0.128125, -0.101875, -0.114063, -0.167813
#*# tension = 0.2
#*# min_x = 75.0
#*# algo = bicubic
#*# y_count = 4
#*# mesh_y_pps = 2
#*# min_y = 75.0
#*# x_count = 4
#*# max_y = 309.99
#*# mesh_x_pps = 2
#*# max_x = 330.0
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 64.211
#*# pid_ki = 2.289
#*# pid_kd = 450.279
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 24.986
#*# pid_ki = 1.487
#*# pid_kd = 104.943
