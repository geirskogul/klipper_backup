########################################
# Printer configuration
########################################

[bltouch]
sensor_pin: ^PB7
control_pin: PB6
pin_move_time: 0.280
stow_on_each_sample: False
probe_with_touch_mode: True
x_offset: -46
y_offset: -15
z_offset = 4.870 #larger number is closer to bed
sample_retract_dist: 1.0
samples: 3
samples_tolerance: 0.025
samples_tolerance_retries: 6

########################################
# Mainsail Configuration
########################################
[include mainsail.cfg]

[input_shaper]
shaper_freq_x: 29.0
shaper_type_x: mzv
shaper_freq_y: 46.2
shaper_type_y: 2hump_ei

[printer]
kinematics: cartesian
max_velocity: 175
max_accel: 1500
#max_accel_to_decel: 1500
#square_corner_velocity: 5 
max_z_velocity: 8
max_z_accel: 100

[display_status]

[pause_resume]

##################################
#          Accelerometer         #
##################################
[adxl345]
cs_pin: PA15
spi_bus: spi3


[resonance_tester]
accel_chip: adxl345
probe_points:
    175,175,200  # an example


##################################
# Neopixel Config Clipper Native #
##################################

[neopixel my_neopixel]
pin: PB0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 0.3
initial_GREEN: 0.0
initial_BLUE: 0.4
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.

[gcode_macro LED_IDLE]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.3 GREEN=0.0 BLUE=0.4
    {% endfor %}
    
[gcode_macro LED_UP]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
        SET_LED LED=my_neopixel RED=0.1 GREEN=1.0 BLUE=0.1 INDEX=2
	G4 P5
    {% endfor %}

[gcode_macro LED_SET]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
        SET_LED LED=my_neopixel RED=0.1 GREEN=1.0 BLUE=0.1 INDEX=2
        SET_LED LED=my_neopixel RED=0.3 GREEN=0.5 BLUE=0.3 INDEX=1
        SET_LED LED=my_neopixel RED=0.1 GREEN=1.0 BLUE=0.1 INDEX=3
	G4 P5
    {% endfor %}
    
[gcode_macro LED_SETTLE]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=2
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=1
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=3
    {% endfor %}
        
[gcode_macro LED_PROBING]
gcode:
    {% for flashes in range(params.COUNT|default(10)|int) %}
	    SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=1 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=2 TRANSMIT=1
	G4 P120                       ; sleep 250ms
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=3 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=1 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=1
	G4 P120                       ; sleep 250ms
	SET_LED LED=my_neopixel RED=0.0 GREEN=0.5 BLUE=0.0 INDEX=3 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.5 BLUE=0.0 INDEX=1 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.5 INDEX=2 TRANSMIT=1
	G4 P120                       ; sleep 250ms
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=3 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=2 TRANSMIT=0
        SET_LED LED=my_neopixel RED=0.0 GREEN=0.5 BLUE=0.0 INDEX=1 TRANSMIT=1
	G4 P120                       ; sleep 250ms
    {% endfor %}
    
[gcode_macro LED_READY]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=2
    SET_LED LED=my_neopixel RED=0.4 GREEN=0 BLUE=0.7 INDEX=1
    SET_LED LED=my_neopixel RED=0.4 GREEN=0 BLUE=0.7 INDEX=3
    {% endfor %}

[gcode_macro LED_BED_READY]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=1
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=3
    {% endfor %}

[gcode_macro LED_PRINTING]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.1 BLUE=0.7 INDEX=1
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.1 BLUE=0.7 INDEX=3
    SET_LED LED=my_neopixel RED=0.5 GREEN=0.1 BLUE=0.7 INDEX=2
    {% endfor %}

[gcode_macro LED_HOTEND_READY]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=2
    {% endfor %}

    
[gcode_macro LED_SHUTDOWN]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0.4 GREEN=0 BLUE=0.7 INDEX=2
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=1
    SET_LED LED=my_neopixel RED=0.1 GREEN=0.5 BLUE=0.1 INDEX=3
    {% endfor %}
    
[gcode_macro PRESENT_PART]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=0 GREEN=1 BLUE=0 INDEX=2
    SET_LED LED=my_neopixel RED=1 GREEN=1 BLUE=1 INDEX=1
    SET_LED LED=my_neopixel RED=1 GREEN=1 BLUE=1 INDEX=3
    {% endfor %}

[gcode_macro LED_HOTEND_HEATING]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=1 GREEN=0.5 BLUE=0.0 INDEX=2
    {% endfor %}

[gcode_macro LED_BED_HEATING]
gcode: 
    {% for flashes in range(params.COUNT|default(10)|int) %}
    SET_LED LED=my_neopixel RED=1 GREEN=0.5 BLUE=0.0 INDEX=1
    SET_LED LED=my_neopixel RED=1 GREEN=0.5 BLUE=0.0 INDEX=3
    {% endfor %}


########################################
# Temperature configuration
########################################

[heater_bed]
heater_pin: PA1
sensor_pin: PF3
sensor_type: EPCOS 100K B57560G104F
#control: pid
#pid_kp = 64.657
#pid_ki = 0.887
#pid_kd = 1178.372
min_temp: 0
max_temp: 130

[fan] # PART COOLERS
pin: PD12 # FAN2

[heater_fan HeaterFan] # HOTEND COOLER
pin: PE5 # FAN1
heater_temp: 50.0
heater: extruder

[controller_fan BoardFan]
heater: extruder, heater_bed
pin: PA8 # FAN0


[temperature_sensor mcu_temp]
sensor_type: temperature_mcu

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_210056001251303432383339-if00
restart_method: command
baud: 250000

# FOR RESONANCE COMPENSATION

# [mcu rpi]
# serial: /tmp/klipper_host_mcu

# [adxl345]
# cs_pin: rpi:None

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#     175,175,20  # an example


###################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
## Some micro-controller boards may require an spi bus to be specified:
#spi_bus: spi
## Alternatively, some micro-controller boards may work with software spi:
contrast: 63
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5

[output_pin beeper]
pin: EXP1_1

[neopixel btt_mini12864]
pin: EXP1_6
chain_count: 3
color_order: RGB
initial_RED: 0.5
initial_GREEN: 0.0
initial_BLUE: 0.5







[bed_screws]
screw1: 75,50
screw1_name: Front Left
screw2: 315,50
screw2_name: Front Right
screw3: 315,300
screw3_name: Rear Right
screw4: 75, 300
screw4_name: Rear Left
speed: 250
horizontal_move_z: 7

[screws_tilt_adjust]
screw1: 55,20
screw1_name: Front Left
screw2: 362,20
screw2_name: Front Right
screw3: 362,300
screw3_name: Rear Right
screw4: 55, 300
screw4_name: Rear Left
speed: 250
horizontal_move_z: 7

########################################
#         Quad Gantry Level            #
########################################

[quad_gantry_level]
gantry_corners: -20, 95
  400, 277
#   A newline separated list of X, Y coordinates describing the two
#   opposing corners of the gantry. The first entry corresponds to Z,
#   the second to Z2. This parameter must be provided.
points: 60, 30
  60, 320
  360, 320
  360, 30
#   A newline separated list of four X, Y points that should be probed
#   during a QUAD_GANTRY_LEVEL command. Order of the locations is
#   important, and should correspond to Z, Z1, Z2, and Z3 location in
#   order. This parameter must be provided. For maximum accuracy,
#   ensure your probe offsets are configured.
speed:100
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 8
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
max_adjust: 10
#   Safety limit if an adjustment greater than this value is requested
#   quad_gantry_level will abort.
retries: 8
#   Number of times to retry if the probed points aren't within
#   tolerance.
retry_tolerance: 0.035
#   If retries are enabled then retry if largest and smallest probed
#   points differ more than retry_tolerance.

[bed_mesh]
speed: 280
horizontal_move_z: 7.0
mesh_min: 20, 20
mesh_max: 290, 320
probe_count: 4,3
algorithm: bicubic
move_check_distance: 3
split_delta_z: 0.025
fade_start: 1
fade_end: 5


########################################
# Stepper configuration
########################################

[stepper_x]
step_pin: PF13
dir_pin: !PF12
enable_pin: !PF14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PG6
#position_endstop: 374 (if cable chain issue is fixed, use this line for true edge of bed 0,0)
position_endstop: 359
position_max: 380
homing_speed: 80

[stepper_y]
step_pin: PG0
dir_pin: !PG1
enable_pin: !PF15
microsteps: 16
rotation_distance: 40
endstop_pin: ^PG9
#position_endstop: 380 (if bltouch is moved to klicky, use this line for true 0,0)
position_endstop: 350
position_max: 370
homing_speed: 80

[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
microsteps: 16
rotation_distance: 2
endstop_pin: probe:z_virtual_endstop
position_max: 375
position_min: -20 # NEEDED FOR CALIBRATION 
homing_speed: 10
second_homing_speed: 5

[stepper_z1]
step_pin: PE6
dir_pin: !PA14
enable_pin: !PE0
microsteps: 16
rotation_distance: 2

[stepper_z2]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
microsteps: 16
rotation_distance: 2

[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
microsteps: 16
rotation_distance: 2

[safe_z_home]
home_xy_position: 185,188
speed: 75
z_hop: 5
z_hop_speed: 10

[extruder]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
heater_pin: PA2 # HE0
sensor_pin:  PF4
microsteps: 16
rotation_distance: 26.2
nozzle_diameter: 0.600
max_extrude_only_distance: 2500
max_extrude_cross_section: 1
filament_diameter: 1.750
# min_extrude_temp: 10 #FOR CALIBRATION
min_extrude_temp: 130
sensor_type: EPCOS 100K B57560G104F
#control: pid
#pid_kp = 26.897
#pid_ki = 1.830
#pid_kd = 98.848
min_temp: 0
max_temp: 300
pressure_advance = 0.02
pressure_advance_smooth_time: 0.01

[filament_switch_sensor material_0]
switch_pin: PG12

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_y]
uart_pin: PC6
diag_pin: PG10
run_current: 0.775
# hold_current: 0.100
interpolate: False
stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PD11
diag_pin: PG9
run_current: 0.600
hold_current: 0.125
interpolate: False
stealthchop_threshold: 999999

[tmc2209 stepper_z1]
uart_pin: PD3
diag_pin: PG15
run_current: 0.600
hold_current: 0.125
interpolate: False
stealthchop_threshold: 999999

[tmc2209 stepper_z2]
uart_pin: PC7
diag_pin: PG11
run_current: 0.600
hold_current: 0.125
interpolate: False
stealthchop_threshold: 999999

[tmc2209 stepper_z3]
uart_pin: PE4
diag_pin: PG13
run_current: 0.600
hold_current: 0.125
interpolate: False
stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PF2
run_current: 0.675
interpolate: False
# hold_current: 0.100
stealthchop_threshold: 999999

[gcode_macro BED_MESH_CALIBRATE_RECT]
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 3
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}




[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro LEVEL_AT_TEMP]
gcode:
  {% set TEMP = params.TEMP|default(60)|float %}
  M140 S{TEMP}
  M190 S{TEMP}
  G4 P60000
  G28
  Z_TILT_ADJUST
  G28 Z
  BED_MESH_CALIBRATE
  TURN_OFF_HEATERS
  

[gcode_macro START_PRINT]
gcode:
    LEVEL_BED_ADVANCED MAX_AGE=1 ; probe mesh eventually

[gcode_macro END_PRINT]
gcode:
    G91 ; Relative positioning
    G1 E-3 F1800 ; Retract
    G1 F3000 Z3 ; Move up
    G90 ; Absolute pos.
    G1 X250 Y215; present print
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    M84 ; Disable steppers

; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
    SAVE_CONFIG
    
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
    ; homing if not homed yet
    G28
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.007083, -0.024167, -0.039583, 0.075208
#*# 	  -0.110833, -0.127708, -0.114583, -0.032083
#*# 	  -0.065625, -0.109792, -0.122083, -0.113542
#*# 	  0.028958, 0.075833, -0.045833, -0.034375
#*# tension = 0.2
#*# min_x = 10.0
#*# algo = bicubic
#*# y_count = 4
#*# mesh_y_pps = 2
#*# min_y = 10.0
#*# x_count = 4
#*# max_y = 329.98
#*# mesh_x_pps = 2
#*# max_x = 299.98
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 65.833
#*# pid_ki = 0.918
#*# pid_kd = 1180.057
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 27.335
#*# pid_ki = 1.642
#*# pid_kd = 113.781
